{"ast":null,"code":"import _createForOfIteratorHelper from\"/workspaces/sorting-visualizer/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";var Dijakstra=function Dijakstra(grid,startNode){startNode.distance=0;var unvisitedNode=[];var _iterator=_createForOfIteratorHelper(grid),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var row=_step.value;var _iterator2=_createForOfIteratorHelper(row),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var node=_step2.value;unvisitedNode.push(node);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}var visitedNodeInOrder=[];while(unvisitedNode.length>0){unvisitedNode.sort(function(nodeA,nodeB){return nodeA.distance-nodeB.distance;});var currentNode=unvisitedNode.shift();visitedNodeInOrder.push(currentNode);currentNode.isVisited=true;if(currentNode.isWall)continue;if(currentNode.isFinish)return visitedNodeInOrder;updateNeighbourNodeDistance(currentNode,grid);}};var updateNeighbourNodeDistance=function updateNeighbourNodeDistance(node,grid){// console.log(node.distance)\nvar X=[1,0,-1,0];var Y=[0,-1,0,1];var col=node.col,row=node.row;for(var i=0;i<4;i++){var newX=col+X[i];var newY=row+Y[i];if(isValid(grid,newY,newX)&&!grid[newY][newX].isVisited){grid[newY][newX].distance=node.distance+1;grid[newY][newX].parent=node;}}};var isValid=function isValid(grid,row,col){if(row>=0&&row<grid.length&&col>=0&&col<grid[0].length)return true;return false;};// module.exports = Dijakstra\nexport default Dijakstra;","map":{"version":3,"names":["Dijakstra","grid","startNode","distance","unvisitedNode","_iterator","_createForOfIteratorHelper","_step","s","n","done","row","value","_iterator2","_step2","node","push","err","e","f","visitedNodeInOrder","length","sort","nodeA","nodeB","currentNode","shift","isVisited","isWall","isFinish","updateNeighbourNodeDistance","X","Y","col","i","newX","newY","isValid","parent"],"sources":["/workspaces/sorting-visualizer/src/Algorithms/pathfinding/Dijakstra.js"],"sourcesContent":["const Dijakstra = (grid, startNode)=>{\r\n\r\n    startNode.distance = 0;\r\n    let unvisitedNode = []\r\n    for(const row of grid){\r\n        for(const node of row){\r\n            unvisitedNode.push(node);\r\n        }\r\n    }\r\n    let visitedNodeInOrder =  []\r\n    while(unvisitedNode.length>0){\r\n        unvisitedNode.sort((nodeA,nodeB)=>nodeA.distance-nodeB.distance);\r\n        let currentNode = unvisitedNode.shift();\r\n        visitedNodeInOrder.push(currentNode);\r\n        currentNode.isVisited=true;\r\n        if(currentNode.isWall) continue;\r\n        if(currentNode.isFinish) return visitedNodeInOrder;\r\n        updateNeighbourNodeDistance(currentNode,grid);\r\n    }\r\n}\r\n\r\n\r\nconst updateNeighbourNodeDistance = (node,grid) => {\r\n    // console.log(node.distance)\r\n    let X = [1,0,-1,0]\r\n    let Y = [0,-1,0,1]\r\n    let {col,row} = node\r\n    for(let i=0;i<4;i++){\r\n        let newX = col + X[i]\r\n        let newY = row + Y[i];\r\n        if(isValid(grid,newY,newX) && !grid[newY][newX].isVisited){\r\n            grid[newY][newX].distance = (node.distance+1);\r\n            grid[newY][newX].parent = node;\r\n        }\r\n    }\r\n}\r\n\r\nconst isValid = (grid,row,col) => {\r\n    if(row>=0 && row<grid.length && col>=0 && col<grid[0].length) return true;\r\n    return false;\r\n}\r\n// module.exports = Dijakstra\r\nexport default Dijakstra;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}